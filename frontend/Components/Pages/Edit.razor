@page "/edit-job/{id}"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<PageTitle>Edit Job App</PageTitle>

<h1>Edit Application</h1>

@if (!string.IsNullOrWhiteSpace(message))
{
    <p>@message</p>
}

@if (formModel != null)
{
    <EditForm Enhance EditContext="editContext" OnValidSubmit="@HandleSubmit" FormName="Form1">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        <input type="hidden" @bind="formModel.id" />
        <input type="hidden" @bind="formModel.created_at" />

        <div class="container">
            <div class="row">
                <div class="col-md-2 p-1">
                    <label>Title</label>
                </div>
                <div class="col-md-4 p-1">
                    <InputText @bind-Value="formModel.title" />
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-2 p-1">
                    <label>Company</label>
                </div>
                <div class="col-md-4 p-1">
                    <InputText @bind-Value="formModel.company" />
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-2 p-1">
                    <label>URL</label>
                </div>
                <div class="col-md-4 p-1">
                    <InputText @bind-Value="formModel.url" />
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-2 p-1">
                    <label>Location</label>
                </div>
                <div class="col-md-4 p-1">
                    <InputText @bind-Value="formModel.location" />
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-2 p-1">
                    <label>Status</label>
                </div>
                <div class="col-md-4 p-1">
                    <InputText @bind-Value="formModel.status" />
                </div>
            </div>
        </div>
        <div>
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public string id { get; set; }

    private EditContext? editContext;
    private string message = "";

    public Job? formModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadJobAsync();
        if (formModel != null)
        {
            editContext = new(formModel);
        }
    }

    private async Task LoadJobAsync()
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:8000/api/get_job?id={id}");
            if (response.IsSuccessStatusCode)
            {
                formModel = await response.Content.ReadFromJsonAsync<Job>();
            }
            else
            {
                Console.WriteLine(response);
                message = "Error loading job data.";
            }
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("http://localhost:8000/api/update_job", formModel);

            if (response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response content: {responseContent}");
                message = "Submitted successfully";
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {errorContent}");
                message = $"There was an error in the request.  {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public class Job
    {
        public string id { get; set; }
        public string title { get; set; }
        public string company { get; set; }
        public string url { get; set; }
        public string location { get; set; }
        public string status { get; set; }
        public string created_at { get; set; }
    }
}
